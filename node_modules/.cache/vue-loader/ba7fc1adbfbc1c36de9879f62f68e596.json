{"remainingRequest":"C:\\Users\\Alexander\\Documents\\GitHub\\Roomacle\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Alexander\\Documents\\GitHub\\Roomacle\\src\\components\\Calender.vue?vue&type=template&id=199eaeea&","dependencies":[{"path":"C:\\Users\\Alexander\\Documents\\GitHub\\Roomacle\\src\\components\\Calender.vue","mtime":1616598279873},{"path":"C:\\Users\\Alexander\\Documents\\GitHub\\Roomacle\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexander\\Documents\\GitHub\\Roomacle\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Alexander\\Documents\\GitHub\\Roomacle\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexander\\Documents\\GitHub\\Roomacle\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}